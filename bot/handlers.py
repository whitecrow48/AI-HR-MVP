# handlers.py
import time

from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import ContextTypes

import os
from bot.data_loader import RESUMES_DIR, get_vacancy_by_id, load_vacancies
from nlp.parser import parse_resume
from nlp.analyzer import analyze_resume_vs_vacancy

# -------------------- –ú–µ–Ω—é --------------------
async def start_menu(update, context):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ AI HR Bot.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ.\n\n"
    )
    await show_main_menu(update, context)


async def show_main_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"), KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
        [KeyboardButton("–ü–æ–º–æ—â—å"), KeyboardButton("–û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=None)


async def back_to_menu(update, context):
    query = update.callback_query
    await query.answer()
    await show_main_menu(update, context)

async def back_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_list":
        from bot.utils import list_vacancies
        vacancies = load_vacancies()
        await list_vacancies(update, context, vacancies)
    elif query.data == "back_to_choose":
        await choose_vacancy(update, context)



# -------------------- –í–∞–∫–∞–Ω—Å–∏–∏ --------------------
async def choose_vacancy(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∫–Ω–æ–ø–∫–∞–º–∏ (–∏–Ω–ª–∞–π–Ω)"""
    vacancies = get_all_vacancies()
    keyboard = [[InlineKeyboardButton(v["title"], callback_data=f"select_{v['id']}")] for v in vacancies]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=reply_markup)


async def vacancy_selected(update, context):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ"""
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("select_"):
        return

    vac_id = int(query.data.replace("select_", ""))
    context.user_data["selected_vacancy_id"] = vac_id

    vac = get_vacancy_by_id(vac_id)
    if not vac:
        await query.message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é: {vac['title']}\n"
        f"–ì–æ—Ä–æ–¥: {vac['city']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ (PDF, DOCX –∏–ª–∏ RTF)."
    )
    keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_choose")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


# -------------------- –†–µ–∑—é–º–µ --------------------
async def handle_resume(update, context):
    message = update.message

    if not message.document:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ RTF.")
        return

    file_name = message.document.file_name
    if not file_name.lower().endswith((".pdf", ".docx", ".rtf")):
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, DOCX –∏–ª–∏ RTF.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    user_id = message.from_user.id
    username = message.from_user.username or "user"
    vacancy_id = context.user_data.get("selected_vacancy_id", 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è
    timestamp = time.strftime("%Y-%m-%d_%H-%M-%S", time.localtime())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    safe_file_name = file_name.replace(" ", "_")  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    unique_name = f"{user_id}_{username}_{vacancy_id}_{timestamp}_{safe_file_name}"
    file_path = os.path.join(RESUMES_DIR, unique_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await message.document.get_file()
    await file.download_to_drive(file_path)

    await message.reply_text("üìÇ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑... ‚è≥")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    vac = get_vacancy_by_id(vacancy_id)
    if not vac:
        await message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ ---
    from nlp.parser import parse_resume
    from nlp.analyzer import analyze_resume_vs_vacancy

    vacancy_skills = vac.get("requirements", [])
    parsed_data = parse_resume(file_path, vacancy_skills)
    analysis = analyze_resume_vs_vacancy(parsed_data, vac)

    skills = parsed_data.get("skills", [])
    experience = parsed_data.get("experience", [])
    hard_score = analysis["hard_score"]
    soft_score = analysis["soft_score"]
    cases_score = analysis["cases_score"]
    total_score = analysis["total_score"]
    red_flags = analysis["red_flags"]

    response_text = (
        f"‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
        f"üìå –ù–∞–≤—ã–∫–∏: {', '.join(skills) if skills else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}\n"
        f"üíº –û–ø—ã—Ç: {', '.join(experience) if experience else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}\n\n"
        f"üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{vac['title']}¬ª:\n"
        f"- Hard skills: {hard_score}%\n"
        f"- Communication: {soft_score}%\n"
        f"- Cases: {cases_score}%\n"
        f"‚û° –ò—Ç–æ–≥: {total_score}%\n\n"
    )

    if red_flags:
        response_text += f"‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {', '.join(red_flags)}\n\n"

    if total_score >= 60:
        response_text += "‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø! –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–π—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é."
    else:
        response_text += "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∑—é–º–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏."

    await message.reply_text(response_text)



# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def get_all_vacancies():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    from bot.data_loader import load_vacancies
    return load_vacancies()
