# resume_handlers.py

import os
import time
from bot.data_loader import RESUMES_DIR
from logs.logger import logger
from nlp.parser import parse_resume
from nlp.analyzer import analyze_resume_vs_vacancy
from bot.data_loader import VacancyManager

vacancy_manager = VacancyManager()

async def handle_resume(update, context):
    message = update.message

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        if not message.document:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ RTF.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        file_name = message.document.file_name
        if not file_name.lower().endswith((".pdf", ".docx", ".rtf")):
            await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, DOCX –∏–ª–∏ RTF.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: {file_name}")
            return

        user_id = message.from_user.id
        username = message.from_user.username or "user"
        vacancy_id = context.user_data.get("selected_vacancy_id")
        if not vacancy_id:
            await message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é.")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        timestamp = time.strftime("%Y-%m-%d_%H-%M-%S", time.localtime())
        safe_file_name = file_name.replace(" ", "_")
        unique_name = f"{user_id}_{username}_{vacancy_id}_{timestamp}_{safe_file_name}"
        file_path = os.path.join(RESUMES_DIR, unique_name)

        file = await message.document.get_file()
        await file.download_to_drive(file_path)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ä–µ–∑—é–º–µ: {file_name} -> {unique_name}")

        await message.reply_text("üìÇ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑... ‚è≥")

        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ VacancyManager
        vac = vacancy_manager.get_vacancy_by_id(vacancy_id)
        if not vac:
            await message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.error(f"–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            return

        vacancy_skills = vac.get("requirements", [])

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ
        parsed_data = parse_resume(file_path, vacancy_skills)
        logger.info(f"Parsed resume data for user {user_id}: {parsed_data}")

        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        analysis = analyze_resume_vs_vacancy(parsed_data, vac)
        logger.info(f"Analysis results for user {user_id}, vacancy {vac['id']}: {analysis}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        skills = parsed_data.get("skills", [])
        experience = parsed_data.get("experience", [])
        hard_score = analysis["hard_score"]
        soft_score = analysis["soft_score"]
        cases_score = analysis["cases_score"]
        total_score = analysis["total_score"]
        red_flags = analysis["red_flags"]

        response_text = (
            f"‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
            f"üìå –ù–∞–≤—ã–∫–∏: {', '.join(skills) if skills else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}\n"
            f"üíº –û–ø—ã—Ç: {', '.join(experience) if experience else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}\n\n"
            f"üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{vac['title']}¬ª:\n"
            f"- Hard skills: {hard_score}%\n"
            f"- Communication: {soft_score}%\n"
            f"- Cases: {cases_score}%\n"
            f"‚û° –ò—Ç–æ–≥: {total_score}%\n\n"
        )

        if red_flags:
            response_text += f"‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {', '.join(red_flags)}\n\n"

        if total_score >= 60:
            response_text += "‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø! –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–π—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é."
        else:
            response_text += "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∑—é–º–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏."

        await message.reply_text(response_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
