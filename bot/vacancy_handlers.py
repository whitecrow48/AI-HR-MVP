# vacancy_handlers.py

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot.data_loader import VacancyManager
from bot.utils import list_vacancies
from logs.logger import logger

# —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
vacancy_manager = VacancyManager()



# -------------------- –í–∞–∫–∞–Ω—Å–∏–∏ --------------------
async def choose_vacancy(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∫–Ω–æ–ø–∫–∞–º–∏ (–∏–Ω–ª–∞–π–Ω)"""
    try:
        vacancies = vacancy_manager.load_vacancies()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π. –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")

        keyboard = [[InlineKeyboardButton(v["title"], callback_data=f"select_{v['id']}")] for v in vacancies]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=reply_markup)
            logger.info(f"–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        elif update.callback_query:
            query = update.callback_query
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=reply_markup)
            logger.info(f"–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id} —á–µ—Ä–µ–∑ callback")

    except Exception as e:
        user_id = update.effective_user.id if update.effective_user else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def vacancy_selected(update, context):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ"""
    query = update.callback_query
    await query.answer()

    try:
        if not query.data.startswith("select_"):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
            return

        vac_id = int(query.data.replace("select_", ""))
        context.user_data["selected_vacancy_id"] = vac_id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª –≤–∞–∫–∞–Ω—Å–∏—é ID={vac_id}")

        vac = vacancy_manager.get_vacancy_by_id(vac_id)
        if not vac:
            await query.message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"–í–∞–∫–∞–Ω—Å–∏—è ID={vac_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            return

        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é: {vac['title']}\n"
            f"–ì–æ—Ä–æ–¥: {vac['city']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ (PDF, DOCX –∏–ª–∏ RTF)."
        )
        keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_choose")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def show_vacancy_details(update, context):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()

    try:
        vac_id = query.data.replace("vac_", "").split("_")[0]
        vac = vacancy_manager.get_vacancy_by_id(int(vac_id))

        if vac:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ID={vac_id}")
            text = (
                f"üè¢ –í–∞–∫–∞–Ω—Å–∏—è: {vac['title']}\n"
                f"üìç –ì–æ—Ä–æ–¥: {vac['city']}\n"
                f"üìÑ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {', '.join(vac.get('responsibilities', []))}\n"
                f"üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {', '.join(vac.get('requirements', []))}\n"
                f"üíº –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {vac.get('employment_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            )
            keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_list")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é ID={vac_id}")
            await query.message.reply_text("‚ö† –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")




async def back_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.callback_query
    await query.answer()

    try:
        user_id = query.from_user.id

        if query.data == "back_to_list":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π")
            vacancies = vacancy_manager.load_vacancies()
            await list_vacancies(update, context, vacancies)

        elif query.data == "back_to_choose":
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏")
            await choose_vacancy(update, context)

        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥': {query.data}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
